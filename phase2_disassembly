   0x0000000000400efc <+0>:	push   %rbp                      # Callee saved
   0x0000000000400efd <+1>:	push   %rbx                      # Callee saved
   0x0000000000400efe <+2>:	sub    $0x28,%rsp                # Make way for stack
   0x0000000000400f02 <+6>:	mov    %rsp,%rsi                  # Save rsp
   0x0000000000400f05 <+9>:	callq  0x40145c <read_six_numbers>  # call function read_six_numbers 
                   0a <+14>:	cmpl   $0x1,(%rsp)                 # compare 1 : m(rsp) // Check if first number is 1
   0x0000000000400f0e <+18>:	je     0x400f30 <phase_2+52>     # if equal jump to 30
   0x0000000000400f10 <+20>:	callq  0x40143a <explode_bomb>   # Boom!
   0x0000000000400f15 <+25>:	jmp    0x400f30 <phase_2+52>     # jump to 30
                   17 <+27>:	mov    -0x4(%rbx),%eax            # eax = m(rbx - 4)
   0x0000000000400f1a <+30>:	add    %eax,%eax                 # eax = 2*eax
   0x0000000000400f1c <+32>:	cmp    %eax,(%rbx)                # compare eax : m(rbx)
   0x0000000000400f1e <+34>:	je     0x400f25 <phase_2+41>      # if equal jump to 25
   0x0000000000400f20 <+36>:	callq  0x40143a <explode_bomb>   # Boom!
                   25 <+41>:	add    $0x4,%rbx                # rbx = rbx + 4
   0x0000000000400f29 <+45>:	cmp    %rbp,%rbx                # compare rbp : rbx
   0x0000000000400f2c <+48>:	jne    0x400f17 <phase_2+27>   # if not equal jump to 17
   0x0000000000400f2e <+50>:	jmp    0x400f3c <phase_2+64>   # Else exit!(Solved)
                   30 <+52>:	lea    0x4(%rsp),%rbx          # rbx = rsp + 4
                   35 <+57>:	lea    0x18(%rsp),%rbp         # rbp = rsp + 24
                   3a <+62>:	jmp    0x400f17 <phase_2+27>   # jump to 17
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f3c <+64>:	add    $0x28,%rsp      # Exit code...
   0x0000000000400f40 <+68>:	pop    %rbx
   0x0000000000400f41 <+69>:	pop    %rbp
   0x0000000000400f42 <+70>:	retq   

